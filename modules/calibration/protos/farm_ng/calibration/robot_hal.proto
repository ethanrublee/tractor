syntax = "proto3";

import "farm_ng/calibration/calibrator.proto";
import "farm_ng/perception/geometry.proto";
import "farm_ng/perception/image.proto";

package farm_ng.calibration;
option go_package = "github.com/farm-ng/genproto/calibration";

message CapturePoseRequest {
  // The commanded pose(s).
  // The interpretation of this set of poses is application-specific.
  // For example, an application with a mobile manipulator might interpret two poses as
  // world_pose_base and arm_base_pose_tool.
  repeated farm_ng.perception.NamedSE3Pose poses = 1;
}

message CapturePoseResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_ERROR_STOPPED = 2;
    STATUS_ERROR_NOT_READY = 3;
    STATUS_ERROR_BAD_POSE = 4;
  }
  Status status = 1;

  // The achieved pose(s).
  // The interpretation of this set of poses is application-specific (see CapturePoseRequest).
  repeated farm_ng.perception.NamedSE3Pose poses = 2;

  // The captured image.
  farm_ng.perception.ImageRGBD image_rgbd = 3;
}

// A named collection of poses.
message PoseSet {
  string name = 1;
  repeated farm_ng.perception.NamedSE3Pose poses = 2;
}

message RobotModel {
  SolverStatus status = 1;

  // Total RMSE for the calibration result.
  double rmse = 2;

  // A collection of poses, estimated by the calibration program.
  // The interpretation of this set of poses is application-specific.
  // The number of poses in each PoseSet is the same.
  repeated PoseSet poses = 3;

  // Detailed statistics (e.g. RMSE) for each measurement.
  // The number of stats is the same as the number of poses in each PoseSet in this result.
  // repeated PerMeasurementStats stats = 4;
}

message CalibrationResultRequest {
  // The calibrated robot model.
  RobotModel model = 1;

  // A name for the model, such as a date and workcell number.
  string model_name = 2;

  // Who performed the calibration?
  string operator_name = 3;

  // Any notes associated with the calibration, like why it was performed.
  string notes = 4;
}

message CalibrationResultResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACCEPTED = 1;
  }
  Status status = 1;
}

// This service API is implemented by a robot (or robot workcell), and allows the
// calibration tool UI to interactively drive a calibration motion and capture
// dance. The implementation of the service has access to camera frame grabbers,
// robot controller, robot kinematics, and application-specific safety and
// system state variables.
service RobotHALService {
  // The calibration tool calls CapturePose when initiated from the UI, with a
  // sequence of robot pose goals, and expects the robot to move to each goal,
  // pause for some amount of time, and return an image and the achieved pose.
  // It is the server's responsibility to ensure it is safe to move to the
  // goal.
  rpc CapturePose(stream CapturePoseRequest)
    returns (stream CapturePoseResponse) {
  }
  // When the calibration result has been accepted by an operator in the
  // calibration UI, the calibration tool calls this function to report the
  // calibration to the workcell.
  rpc CalibrationResult(CalibrationResultRequest)
    returns (CalibrationResultResponse) {
  }
}
